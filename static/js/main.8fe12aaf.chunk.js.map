{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","User","state","accounts","contract","step","isV","isA","proposals","voters","winningDesc","winningID","winningCount","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","Voting","networks","instance","Contract","abi","address","account","isAdmin","isVoter","getPastEvents","fromBlock","toBlock","votersEvent","i","length","methods","owner","call","Admin","setState","runInit","alert","error","workflowStatus","stepA","getProposals","proposalsA","winningProposalID","getOneProposal","winningProposal","description","voteCount","registerVoter","document","getElementById","value","addVoter","send","from","propose","prop","addProposal","vote","voted","setVote","checkVoter","getVoter","voter","whichVote","votedProposalId","innerHTML","nextStep","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","this","className","id","src","alt","type","onClick","map","propal","index","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8fe12aaf.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport './App.css';\nimport getWeb3 from \"./getWeb3\";\nimport Voting from \"./contracts/Voting.json\";\n\n\nclass User extends Component {  \n    state = { web3: null, accounts: null, contract: null, step: 0, isV: false, isA: false, proposals: null, voters: null, winningDesc: null, winningID: null, winningCount: null};\n\n    componentDidMount = async () => {\n      try {\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Voting.networks[networkId];\n        const instance = new web3.eth.Contract(\n          Voting.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n\n        const account = accounts[0];\n        let isAdmin=false;\n        let isVoter=false;\n\n        let votersEvent= await instance.getPastEvents('VoterRegistered', {fromBlock: 0, toBlock: 'latest'});\n        for (let i=0; i < votersEvent.length; i++){\n          if(votersEvent[i][\"returnValues\"][\"_voterAddress\"]==account){isVoter=true;}\n        }\n\n        let Admin = await instance.methods.owner().call();\n        if (Admin===account){isAdmin=true;} else {isAdmin=false;}\n\n\n        this.setState({ web3, accounts, contract: instance, isV: isVoter, isA:isAdmin}, this.runInit);\n      } catch (error) {\n        alert( `Non-Ethereum browser detected. Can you please try to install MetaMask before starting.`, );\n        console.error(error);\n      }\n    };\n\n    runInit = async() => {\n        const { contract } = this.state;\n        let stepA = await contract.methods.workflowStatus().call();\n        const proposalsA = await contract.methods.getProposals().call();\n        const winningID= await contract.methods.winningProposalID().call();\n        let winningProposal;\n        try{\n          winningProposal= await contract.methods.getOneProposal(winningID).call();\n          const winningDesc= winningProposal.description;\n          const winningCount= winningProposal.voteCount;\n          this.setState({ step: stepA, proposals: proposalsA, winningDesc:winningDesc, winningID: winningID, winningCount: winningCount });\n      } catch (error){\n          this.setState({ step: stepA, proposals: proposalsA});\n      }\n    }; \n\n    registerVoter = async() => {\n        const { accounts, contract } = this.state;\n        const address = document.getElementById(\"address\").value;\n        await contract.methods.addVoter(address).send({from: accounts[0]});\n        this.runInit();\n    }\n\n    propose = async() => {\n        const { accounts, contract} = this.state;\n        let prop= document.getElementById(\"propal\").value;\n        await contract.methods.addProposal(prop).send({from: accounts[0]});\n        this.runInit();\n    }\n\n    vote = async() => {\n        const { accounts, contract} = this.state;\n        let voted = document.getElementById(\"votedId\").value; \n        await contract.methods.setVote(voted).send({from: accounts[0]});\n        this.runInit();\n    }\n\n    checkVoter = async() => {\n        const { contract } = this.state;\n        const address = document.getElementById(\"checkAddress\").value;\n        const voter = await contract.methods.getVoter(address).call();\n        let whichVote = voter.votedProposalId;\n        document.getElementById(\"whichVote\").innerHTML=\"L'utilisateur demandé a voté pour la propal à l'index \" + whichVote;\n    }\n\n    nextStep = async() => {\n        const { contract,accounts } = this.state;\n\n        let step=this.state.step;\n        if (step==0){\n          await contract.methods.startProposalsRegistering().send({from: accounts[0]});\n        }\n        else if (step==1){\n          await contract.methods.endProposalsRegistering().send({from: accounts[0]});\n        }\n        else if (step==2){\n          await contract.methods.startVotingSession().send({from: accounts[0]});\n        }\n        else if (step==3){\n          await contract.methods.endVotingSession().send({from: accounts[0]});\n        }\n        else if (step==4){\n          await contract.methods.tallyVotes().send({from: accounts[0]});\n        }\n        this.runInit();\n\n    }\n\n\n    render(){\n\n        if (!this.state.web3) {\n            return <div>Loading Web3, accounts, and contract...</div>;\n          } \n        if (this.state.isA==false && this.state.isV==false){\n            return (\n                <div>Vas t'en! Tu n'as rien à faire ici</div>\n            )\n        }\n\n        if( this.state.step == 0 ){\n            if(this.state.isA==true){\n                return(      \n                    <div className=\"user\">\n                        <img id=\"logo\" src=\"/alyra.jpeg\" alt=\"logo\"/>\n                        <h1>Bonjour l'admin.</h1><p>La session de vote en est actuellement à l'étape {this.state.step}</p>\n                        <h2>A cette étape, vous pouvez ajouter des adresses à whitelister: </h2>\n                        <input type=\"text\" id=\"address\"  />\n                        <button onClick={this.registerVoter} > Envoyer </button>\n                        <br />\n                        <h2>Vous pouvez mettre fin à cette étape et passer à la suivante en cliquant</h2>\n                        <button onClick={this.nextStep} >Etape suivante</button>\n                    </div>\n                )\n            }\n            else{\n                return(      \n                    <div className=\"user\">\n                        <img id=\"logo\" src=\"/alyra.jpeg\" alt=\"logo\"/>\n                        <h1>Bonjour le voteur.</h1><p>La session de vote en est actuellement à l'étape {this.state.step}</p>\n                        <h2>A cette étape, vous devez attendre que l'administrateur lance l'étape des propositions (ou vous rajoute a la whitelist, si ce n'est deja fait)</h2>\n                    </div>\n                )\n            }\n           \n        }\n\n\n        else if ( this.state.step == 1){\n            if(this.state.isA==true){\n                return(      \n                    <div className=\"user\">\n                        <img id=\"logo\" src=\"/alyra.jpeg\" alt=\"logo\"/>\n                        <h1>Bonjour l'admin.</h1><p>La session de vote en est actuellement à l'étape {this.state.step}</p>\n                        <p>C'est l'étape où les votant peuvent faire des proposition</p>\n\n                        <br />\n                        <h2>Vous pouvez mettre fin à cette étape et passer à la suivante en cliquant</h2>\n                        <button onClick={this.nextStep} >Etape suivante</button>\n                    </div>\n                )\n            }\n            else{\n                return(      \n                    <div className=\"user\">\n                        <img id=\"logo\" src=\"/alyra.jpeg\" alt=\"logo\"/>\n                        <h1>Bonjour le voteur.</h1><p>La session de vote en est actuellement à l'étape {this.state.step}</p>\n                        <h2>A cette étape, vous pouvez proposer des idées sur lesquelles voter ici:</h2>\n                        <input type=\"text\" id=\"propal\" />\n                        <button onClick={this.propose} >Proposer</button>              \n                    </div>\n                )\n            }\n        }\n\n\n        else if ( this.state.step == 2){\n            if(this.state.isA==true){\n                return(      \n                    <div className=\"user\">\n                      <img id=\"logo\" src=\"/alyra.jpeg\" alt=\"logo\"/>\n                        <h1>Bonjour l'admin.</h1><p>La session de vote en est actuellement à l'étape {this.state.step}</p>\n                        <p>C'est l'étape entre les propositions et les votes</p>\n\n                        <br />\n                        <h2>Vous pouvez mettre fin à cette étape et passer à la suivante en cliquant</h2>\n                        <button onClick={this.nextStep} >Etape suivante</button>\n                    </div>\n                )\n            }\n            else{\n                return(      \n                    <div className=\"user\">\n                      <img id=\"logo\" src=\"/alyra.jpeg\" alt=\"logo\"/>\n                        <h2>A cette étape, vous devez attendre que l'administrateur lance l'étape des votes</h2>\n                        <p>En attendant, voici l'ensemble des propositions qui ont été soumises au prochain vote: </p>\n                        <table><tr><th>index</th><th>description</th><th>nombre de voix</th></tr>\n                        {this.state.proposals.map((propal, index) =><tr><td>{index}</td><td>{propal.description}</td><td>{propal.voteCount}</td></tr>)}\n                        </table>\n                    </div>\n                )   \n            }     \n        }\n\n        else if ( this.state.step == 3){\n            if(this.state.isA==true){\n                return(      \n                    <div className=\"user\">\n                      <img id=\"logo\" src=\"/alyra.jpeg\" alt=\"logo\"/>\n                        <h1>Bonjour Monsieur l'admin.</h1><p>La session de vote en est actuellement à l'étape {this.state.step}</p>\n                        <p>C'est l'étape où les votant peuvent voter</p>\n                        <br />\n                        <h2>Vous pouvez mettre fin à cette étape et passer à la suivante en cliquant</h2>\n                        <button onClick={this.nextStep} >Etape suivante</button>\n                    </div>\n                )\n            }\n            else{\n                return(      \n                    <div className=\"user\">\n                      <img id=\"logo\" src=\"/alyra.jpeg\" alt=\"logo\"/>\n                        <h1>Bonjour Monsieur le voteur.</h1><p>La session de vote en est actuellement à l'étape {this.state.step}</p>\n                        <h2>A cette étape, vous pouvez voter pour la meilleure idée. Vous pourrez changer votre vote jusqu'à la fin de cette étape.</h2>\n                        <input type=\"text\" id=\"votedId\" />\n                        <button onClick={this.vote} >Voter</button>\n                        <br /> \n                        <table><tr><th>index</th><th>description</th><th>nombre de voix</th></tr>\n                        {this.state.proposals.map((propal, index) =><tr><td>{index}</td><td>{propal.description}</td><td>{propal.voteCount}</td></tr>)}\n                        </table>            \n                    </div>\n                )\n            }\n        }\n\n        else if ( this.state.step == 4){\n            if(this.state.isA==true){\n                return(      \n                    <div className=\"user\">\n                      <img id=\"logo\" src=\"/alyra.jpeg\" alt=\"logo\"/>\n                        <h1>Bonjour l'admin.</h1><p>La session de vote en est actuellement à l'étape {this.state.step}</p>\n                        <p>C'est l'étape entre les votes et l'annonce des resultats</p>\n                        <br />\n                        <h2>Vous pouvez mettre fin à cette étape et passer à la suivante en cliquant</h2>\n                        <button onClick={this.nextStep} >Etape suivante</button>\n                    </div>\n                )\n            }\n            else{\n                return(      \n                    <div className=\"user\">\n                      <img id=\"logo\" src=\"/alyra.jpeg\" alt=\"logo\"/>\n                        <h1>Bonjour le voteur.</h1><p>La session de vote en est actuellement à l'étape {this.state.step}</p>\n                        <h2>A cette étape, les votes sont finis, vous devez attendre le comptage par l'admin.</h2>\n                        <br />\n                        <table><tr><th>index</th><th>description</th><th>nombre de voix</th></tr>\n                        {this.state.proposals.map((propal, index) =><tr><td>{index}</td><td>{propal.description}</td><td>{propal.voteCount}</td></tr>)}\n                        </table>\n                    </div>\n                )\n            }\n        }\n\n        else if ( this.state.step == 5){\n            return(      \n                <div className=\"user\">\n                  <img id=\"logo\" src=\"/alyra.jpeg\" alt=\"logo\"/>\n                    <h1>Bonjour.</h1><p>La session de vote en est actuellement à l'étape {this.state.step}</p>\n                    <h2>Nous avons notre grand gagnant! C'est la proposition {this.state.winningDesc}, de numéro d'id {this.state.winningID} avec {this.state.winningCount} votes. </h2>\n                    <p>Si vous voulez voir pour qui a voté un utilisateur, rentrez son addresse ici:</p>\n                    <input type=\"text\" id=\"checkAddress\" />\n                    <button onClick={this.checkVoter} >Check</button>\n                    <div id=\"whichVote\"></div>\n                    <br />\n                    <table><tr><th>index</th><th>description</th><th>nombre de voix</th></tr>\n                    {this.state.proposals.map((propal, index) =><tr><td>{index}</td><td>{propal.description}</td><td>{propal.voteCount}</td></tr>)}\n                    </table>\n                </div>\n            )\n        } \n    }\n}\nexport default User;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}